/*
** EPITECH PROJECT, 2018
** poke
** File description:
** poke
*/

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <dirent.h>
#include <stdlib.h>
#include "poke.h"
#include "my.h"

static void fulfill_poke(poke_t *poke, char *str)
{
	char **carac = my_strtoarray(str, ';');

	poke->name = my_strdup(carac[0]);
	poke->dmg = my_atoi(carac[1]);
	poke->def = my_atoi(carac[2]);
	poke->speed = my_atoi(carac[3]);
	poke->hp = my_atoi(carac[4]);
	for (int i = 0; i < 5; i++)
		free(carac[i]);
	free(carac);
}

static int test_caract(char *str)
{
	char **carac = my_strtoarray(str, ';');
	int nb_carac = my_getwords(str, ';');

	if (nb_carac != 5)
		return (-1);
	for (int i = 1; i < 5; i++) {
		if (carac[i] == NULL || my_atoi(carac[i]) <= 0)
			return (-1);
		free(carac[i]);
	}
	free(carac[0]);
	free(carac);
	return (1);
}

static int test_file(char *str, char *path, pokes_t *pokes)
{
	char *full_path = my_strjoin(path, str);
	int fd = open(full_path, O_RDONLY);
	char *line;

	if (fd == -1)
		return (84);
	while ((line = my_gnl(fd)) != NULL) {
		if (line[0] != '#' && test_caract(line) == 1) {
			pokes->pokemons = realloc(pokes->pokemons,sizeof(poke_t)
						  * (pokes->size + 1));
			pokes->pokemons[pokes->size] = malloc(sizeof(poke_t));
			fulfill_poke(pokes->pokemons[pokes->size], line);
			pokes->size++;
		}
		free(line);
	}
	return (1);
}

void parse(pokes_t *pokes, char *path)
{
	DIR *dir = opendir(path);
	struct dirent *curr_file;

	if (dir == NULL)
		return;
	while ((curr_file = readdir(dir)) != NULL) {
		if (curr_file->d_name[0] != '.') {
			pokes->return_value = test_file(curr_file->d_name, path, pokes);
		}
	}
	closedir(dir);
}
