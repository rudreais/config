from  app  import  app
from app import models
from flask import jsonify, request, flash, session, render_template, redirect, url_for
import pymysql as sql
from wtforms import Form, TextField, BooleanField, StringField, PasswordField, validators

app.config['SECRET_KEY'] = '7d441f27d441f27567d441f2b6176a'

def exists_user(username):
    connect = sql.connect(host='localhost',
                          user='root',
                          passwd='',
                          db='tests'
    )
    cursor = connect.cursor()
    cursor.execute("select * from user where username='" + username + "';")
    result = cursor.fetchall()
    cursor.close()
    connect.close()
    if result:
        return 1
    else:
        return 0

def correct_user(username, password):
    connect = sql.connect(host='localhost',
                          user='root',
                          passwd='',
                          db='tests'
    )
    cursor = connect.cursor()
    cursor.execute("select * from user where username='" + username + "' and password='" + password + "';")
    result = cursor.fetchone()
    cursor.close()
    connect.close()
    if result:
        return 1
    else:
        return 0

class ReusableForm(Form):
    name = TextField('Name:', validators=[validators.required()])
    password = PasswordField('Password:', validators=[validators.required()])

@app.route('/', methods=['GET'])
def route_root():
    form = ReusableForm(request.form)
    name = ""
    password = ""
    return render_template('index.html', form=form)

@app.route('/signin', methods=['POST'])
def route_signin():
    if request.method == 'POST':
        name = request.form['name']
        password = request.form['password']
        if not name or not password:
            flash("Error: missing name or pass")
        if correct_user(name, password):
            session['user_id'] = models.get_user_id(name)[0]
            print(session['user_id'])
            session['logged_in'] = True
        else:
            session['logged_in'] = False
    return redirect(url_for('route_root'))

@app.route('/signout', methods=['POST'])
def route_signout():
    if request.method == 'POST':
        session.clear()
    return redirect(url_for('route_root'))

@app.route('/user')
def route_user():
    result = ""
    try:
        connect = sql.connect(host='localhost',
                              user='root',
                              passwd='',
                              db='tests'
        )
        cursor = connect.cursor()
        cursor.execute("SELECT * from  user where id='"+str(session['user_id'])+"';")
        result = cursor.fetchone()
        cursor.close()
        connect.close()
    except  Exception  as e :
        print("Caught  an  exception : ", e)
    if result:
        return render_template('user.html', user=result)
    else:
        return redirect(url_for('route_root'))

@app.route('/user/add', methods=['GET', 'POST'])
def      route_fulfill_form():
    form = ReusableForm(request.form)
    name=""
    password=""
    if request.method == 'POST':
        name=request.form['name']
        password=request.form['password']
        print(name, password)
        if not name or not password:
            flash("Error: one or both parameters are empty")
        elif exists_user(name):
            flash("Error: user already exists")
        else:
            flash("good !")
            try:
                connect = sql.connect(host='localhost',
                                      user='root',
                                      passwd='',
                                      db='tests'
                )
                cursor = connect.cursor()
                cursor.execute("INSERT INTO user (username, password) VALUES ('" + name + "', '" + password + "');")
                connect.commit()
                cursor.close()
                connect.close()
            except  Exception  as e :
                print("Caught  an  exception : ", e)
    return render_template('register.html', form=form)

@app.route('/user/task', methods=['GET'])
def     route_user_task():
    tasks = models.show_tasks(session['user_id'])
    print(tasks)
    return render_template('tasks.html', tasks=tasks)
